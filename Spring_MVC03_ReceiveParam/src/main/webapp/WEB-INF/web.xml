<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--声明，注册springMvc的核心对象DispatchServlet
        需要在tomcat服务器创建后，创建DispatcherServlet对象的实例。

        为什么要创建DispatcherServlet对象的实例呢？
        因为DispatcherServlet在他创建的过程中，会同时创建springMvc容器对象，
        读取springMvc的配置文件，把这个配置文件中的对象都创建好当用户发起请求
        就可以直接使用对象了

        servlet的初始化执行init()方法，DispatcherServlet在init()中{
               //创建容器,读取配置文件
               WebApplicationContext ctx = new ClassPathXmlApplicationContext("springMvc.xml");
               //把容器对象放到ServletContext中
               getServletContext().setAttribute(key,ctx);
        }


        这边的处理逻辑和Spring中的ContextLoaderListener是一样的


        启动Tomcat报错，读取不到这个文件：/WEB-INF/springMvc-servlet.xml
        spring容器创建时，读取的配置文件默认是/WEB-INF/<servlet-name>-servlet.xml

-->

    <servlet>
        <servlet-name>springMvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
<!--自定义springMvc读取配置文件的位置-->
        <init-param>
<!-- springMvc的配置文件位置的属性-->
            <param-name>contextConfigLocation</param-name>
<!--指定自定义文件的位置-->
            <param-value>classpath:SpringMVC.xml</param-value>
        </init-param>
<!-- 如何在tomcat启动时创建servlet对象呢?-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>springMvc</servlet-name>
        <!--
            在使用框架的时候，url-pattern可以使用两种值
            1.使用扩展名方式，语法 *.xxx,xxx是自定义的扩展名。常用的方式*.do *.action *.mvc等等
              http://localhost:8080/springMvc/some.do
              http://localhost:8080/springMvc/other.do
            2. 使用斜杠"/"


        -->
        <url-pattern>*.do</url-pattern>
<!--

  这样以.do结尾的请求都会交给<servlet-name> =springMvc 这个servlet处理
  其实就是将请求交给了中央控制器(DispatcherServlet)
-->
    </servlet-mapping>


<!--  声明过滤器，解决post乱码问题  -->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
<!--   设置项目中使用的字符编码     -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
<!--    强制请求对象(HttpServletRequest)使用encoding的编码方式    -->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!--    强制响应对象(HttpServletResponse)使用encoding的编码方式    -->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
<!--   /*：表示强制所有的请求先通过过滤器处理    -->
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>